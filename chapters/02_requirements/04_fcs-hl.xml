<?xml version="1.0" ?>
<module title="Flight-Controller-Software High-Level" id="FCS-HL">
    <requirement id="1">
        <title>IMU Measurements</title>
        <description>
			The FCS shall read measurement the following data
			around all three axis
			\begin{itemize}
				\item Orientation angle
				\item Rotation-rate
				\item Acceleration
			\end{itemize}
			every $\SI{20}{\milli\second}$.
		</description>
        <parents>
            <parent>P-LL-REQ-2</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="2">
        <title>Attitude Controller</title>
        <description>
			The FCS shall compute a actuator command every $\SI{20}{\milli \second}$, 
			such that the error between estimated attitude
			and actual attitude is less than $\SI{10}{\degree}$ after $\SI{10}{\second}$.
		</description>
        <parents>
            <parent>P-LL-REQ-17</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="3">
        <title>Override Command</title>
        <description>
			The FCS shall use the override information
			as command if the override switch is activated.
		</description>
        <parents>
            <parent>P-LL-REQ-45</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="4">
        <title>Arm Command</title>
        <description>
			The FCS shall always send the motor command 0
			if the arm switch is not activated.
		</description>
        <parents>
            <parent>P-LL-REQ-46</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="5">
        <title>FCS data transmission</title>
        <description>
			The FCS shall transmit IMU data every $\SI{100}{\milli\second}$ 
			to the FCPS.
		</description>
        <parents>
            <parent>P-LL-REQ-3</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="6">
        <title>Motor Setpoint Receive</title>
        <description>
			The FCS shall be able to receive a motor setpoint every 
			$\SI{100}{\milli\second}$
		</description>
        <parents>
            <parent>P-LL-REQ-13</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="7">
        <title>Motor Command</title>
        <description>
			The FCS shall transmit every motor setpoint as a command to 
			the AC at most $\SI{20}{\milli\second}$ after reception.
		</description>
        <parents>
            <parent>P-LL-REQ-14</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="8">
        <title>Orientation Setpoint Reception</title>
        <description>
			The FCS shall receive the orientation setpoint from the FCPS every $\SI{100}{\milli\second}$.
		</description>
        <parents>
            <parent>P-LL-REQ-26</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="9">
        <title>Servo Command Transmission</title>
        <description>
			The FCS shall transmit the computed servo command every 
			$\SI{20}{\milli\second}$.
		</description>
        <parents>
            <parent>P-LL-REQ-18</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <requirement id="10">
        <title>Override reception</title>
        <description>
			The FCS shall be able to receive
			the override information from the RX.
		</description>
        <parents>
            <parent>P-LL-REQ-44</parent>
        </parents>
        <partition>FCS</partition>
    </requirement>
    <design-decision id="1">
        <title>Architecture</title>
        <description>
            The FCS is structure into an architecture consisting of four layers with increasing abstraction
            and application-specificity. Each layer consists of independent modules, each module is responsible for
            exactly one system the FCS interfaces with. 
            
            The layers and modules are:
            \begin{itemize}
                \item Hardware-Abstraction-Layer (HAL):
                    \begin{itemize}
                        \item UART: Handles the configuration of the uart interface for the connection to the IMU, RX and FCP
                        \item Pwm16Bit: Handles the configuration of the physical interface for generating Pulse-Width-Modulates Signals 
                            for the AC
                        \item Timer8Bit: Handles the configuration of the timer for all functionallity with timing requirements
                    \end{itemize}
                \item Drivers
                    \begin{itemize}
                        \item Bno055-UART: Uses the UART Module to handle the read/write commands to the IMU
                        \item Bno055: Uses the Bno055-UART Module to provide functionallity to read sensor values and configure the sensor
                        \item SBus: Uses the UART Module to decode the packages sent by the RX
                        \item Protobuf: Uses the UART Module to decode and encode packages to the FCP
                        \item PPM: Uses the Pwm16Bit Module to generate Pulse-Position-Modulated Signals for the AC
                    \end{itemize}
                \item Components
                    \begin{itemize}
                        \item IMU: Uses the Bno055 Module to configure the sensor for the application and read the required sensor data
                        \item Remote: Uses the SBus Module to decode the inputs and switches sent by the TX
                        \item Flightcomputer: Uses the Protobuf Module to send and receive data from the FCPS
                        \item Actuators: Uses the PPM Module to send commands to the AC
                        \item System: Uses the Timer8bit Module and configures the MCU for the application
                    \end{itemize}
                \item Application
                    \begin{itemize}
                        \item Mode Handler: Collects data from the IMU, Remote and Flightcomputer Module and decides
                            on the Flightmode depending on availability of the data
                        \item Controller: Uses the mode handler information to calculate an actuator signal
                        \item Application: Implements the application logic by controlling the other modules
                        \item Error-Handler: Provides mechanisms to signal warnings and error generated by the modules.
                    \end{itemize}
            \end{itemize}

            This architecture is depicted in Figure \ref{fig:04_fcs}.
            \begin{figure}[H]
                \centering
                \includegraphics[width=\textwidth]{chapters/02_requirements/04_fcs.eps}
                \label{fig:04_fcs}
                \caption{Architecture of the FCS}
            \end{figure}
        </description>
        <reason>
            This layered architecture allows for simple, testable and reusable modules on all layers.
            In addition the application is independent of the physical interfaces and communication strategy,
            such that the application logic can be easily implemented and components can be easily replaced.
        </reason>
    </design-decision>
    <design-decision id="2">
        <title>Fault Detection</title>
        <description>
            The following fault conditions shall be detected:
            \begin{itemize}
                \item Faults reported by the IMU (Self test at startup and status during operation)
                \item Faults reported by the MCU (Brownout)
                \item Violation of the timing constraints (Application Loop Runtime, Watchdog Timer reset)
                \item No data from the IMU for $\SI{100}{\milli\second}$
                \item No data from the flight-computer for $\SI{200}{\milli\second}$
                \item No data from the remote for $\SI{100}{\milli\second}$
                \item Overflow of the Remote or FCP Receive-Buffers due to invalid message size
            \end{itemize}
            and signalled to the error-handler component.
        </description>
        <reason>
            The detection of faults allows to adapt the mission as early as possible, avoiding that faults
            turn into failures of the airplane.
        </reason>
    </design-decision>
    <design-decision id="3">
        <title>Fault Handling</title>
        <description>
            The following fault conditions shall be handled automatically:
            \begin{itemize}
                \item No data from the IMU for $\SI{100}{\milli\second}$: use remote as fallback
                \item No data from the flight-computer for $\SI{200}{\milli\second}$: use remote as fallback
                \item No data from the remote for $\SI{100}{\milli\second}$: do stabilised emergency runtime
                \item Overflow of the Remote or FCP Receive-Buffers: disable the respective receive interrupt
            \end{itemize}
            and signalled to the error-handler component.
        </description>
        <reason>
            Detectable failures which can be handled automatically should be handled automatically by the FCS.
        </reason>
    </design-decision>
</module>
